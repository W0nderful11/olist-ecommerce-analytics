#!/usr/bin/env python3
"""
Aster E‚ÄëCommerce (Olist) ‚Äî —Å–∫—Ä–∏–ø—Ç –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –ë–î
–°–æ–∑–¥–∞—ë—Ç –±–∞–∑—É `olist_analytics`, —Å—Ö–µ–º—É `olist` (–ø—É—Å—Ç—É—é) –∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ.
"""

import psycopg2
import sys
import subprocess

# Database configuration (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑–≤–∏—Ç–∏—è)
DB_CONFIG = {
    "host": "localhost",
    "port": 5432,
    "dbname": "olist_analytics",
    "user": "postgres",
    "password": "postgres"
}

def run_sql_command(command, description):
    """Run SQL command using psql"""
    try:
        cmd = f'PGPASSWORD={DB_CONFIG["password"]} psql -h {DB_CONFIG["host"]} -p {DB_CONFIG["port"]} -U {DB_CONFIG["user"]} -d {DB_CONFIG["dbname"]} -c "{command}"'
        result = subprocess.run(cmd, shell=True, capture_output=True, text=True)
        if result.returncode == 0:
            print(f"‚úÖ {description}")
            return True
        else:
            print(f"‚ùå {description} - Error: {result.stderr}")
            return False
    except Exception as e:
        print(f"‚ùå {description} - Exception: {e}")
        return False

def create_database():
    """–°–æ–∑–¥–∞—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö olist_analytics (–µ—Å–ª–∏ –µ—â—ë –Ω–µ—Ç)"""
    print("üóÑÔ∏è  –°–æ–∑–¥–∞—é –±–∞–∑—É olist_analytics...")
    
    # Create database
    cmd = f'PGPASSWORD={DB_CONFIG["password"]} psql -h {DB_CONFIG["host"]} -p {DB_CONFIG["port"]} -U {DB_CONFIG["user"]} -d postgres -c "CREATE DATABASE olist_analytics;"'
    result = subprocess.run(cmd, shell=True, capture_output=True, text=True)
    
    if result.returncode == 0:
        print("‚úÖ –ë–∞–∑–∞ —Å–æ–∑–¥–∞–Ω–∞")
        return True
    else:
        print(f"‚ö†Ô∏è  –í–æ–∑–º–æ–∂–Ω–æ, –±–∞–∑–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {result.stderr}")
        return True

def create_schema():
    """–°–æ–∑–¥–∞—Ç—å —Å—Ö–µ–º—É olist (–µ—Å–ª–∏ –Ω–µ—Ç) –≤ —Ü–µ–ª–µ–≤–æ–π –ë–î"""
    print("üìã –°–æ–∑–¥–∞—é —Å—Ö–µ–º—É olist...")
    cmd = f'PGPASSWORD={DB_CONFIG["password"]} psql -h {DB_CONFIG["host"]} -p {DB_CONFIG["port"]} -U {DB_CONFIG["user"]} -d {DB_CONFIG["dbname"]} -c "CREATE SCHEMA IF NOT EXISTS olist;"'
    result = subprocess.run(cmd, shell=True, capture_output=True, text=True)
    if result.returncode == 0:
        print("‚úÖ –°—Ö–µ–º–∞ –≥–æ—Ç–æ–≤–∞")
        return True
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ö–µ–º—ã: {result.stderr}")
        return False

def verify_connection():
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î –∏ –Ω–∞–ª–∏—á–∏–µ —Å—Ö–µ–º—ã olist"""
    print("üîç –ü—Ä–æ–≤–µ—Ä—è—é –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î...")
    
    try:
        conn = psycopg2.connect(**DB_CONFIG)
        cursor = conn.cursor()
        
        # Check schemas
        cursor.execute("""
            SELECT schema_name FROM information_schema.schemata
            WHERE schema_name IN ('public','olist')
            ORDER BY schema_name
        """)
        tables = cursor.fetchall()
        
        print(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ. –î–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ö–µ–º—ã: {', '.join(t[0] for t in tables)}")
        
        cursor.close()
        conn.close()
        return True
        
    except Exception as e:
        print(f"‚ùå Connection failed: {e}")
        return False

def main():
    """Main setup function"""
    print("üè™ WALMART ANALYTICS - DATABASE SETUP")
    print("=" * 50)
    
    # Step 1: Create database
    if not create_database():
        print("‚ùå Database creation failed")
        return False
    
    # Step 2: Create schema
    if not create_schema():
        print("‚ùå Schema creation failed")
        return False
    
    # Step 3: Verify connection
    if not verify_connection():
        print("‚ùå Connection verification failed")
        return False
    
    print("\nüéâ Database setup completed successfully!")
    print("Next step: Run import_walmart_data.py to import data")
    return True

if __name__ == "__main__":
    main()
